{"version":3,"sources":["main.js"],"names":["categorySelect","document","querySelector","submitBtn","inputs","querySelectorAll","baseURL","fetch","then","data","json","displayCategories","String","prototype","capitalize","charAt","toUpperCase","slice","output","prop","innerHTML","obj","addEventListener","forEach","keys","input","name","split","length","hasOwnProperty","value","trim","submitData","cat","method","body","JSON","stringify","headers","console","log"],"mappings":";;AAAA,IAAMA,iBAAiBC,SAASC,aAAT,CAAuB,WAAvB,CAAvB;AACA,IAAMC,YAAYF,SAASC,aAAT,CAAuB,SAAvB,CAAlB;AACA,IAAME,SAASH,SAASI,gBAAT,CAA0B,eAA1B,CAAf;AACA,IAAMC,UAAU,uBAAhB;;AAEAC,MAASD,OAAT,UACKE,IADL,CACU;AAAA,WAAQC,KAAKC,IAAL,EAAR;AAAA,CADV,EAEKF,IAFL,CAEU,gBAAQ;AACVG,sBAAkBF,IAAlB;AACH,CAJL;;AAMAG,OAAOC,SAAP,CAAiBC,UAAjB,GAA8B,YAAW;AACrC,WAAO,KAAKC,MAAL,CAAY,CAAZ,EAAeC,WAAf,KAA+B,KAAKC,KAAL,CAAW,CAAX,CAAtC;AACH,CAFD;;AAIA,SAASN,iBAAT,CAA2BF,IAA3B,EAAiC;AAC7B,QAAIS,SAAS,EAAb;AACA,SAAK,IAAMC,IAAX,IAAmBV,IAAnB,EAAyB;AACrBS,sCAA4BC,IAA5B,UAAqCA,KAAKL,UAAL,EAArC;AACH;AACDd,mBAAeoB,SAAf,GAA2BF,MAA3B;AACH;;AAED,IAAIG,MAAM,EAAV;AACAlB,UAAUmB,gBAAV,CAA2B,OAA3B,EAAoC,YAAM;AACtClB,WAAOmB,OAAP,CAAe,iBAAS;AACpB,YAAMC,OAAOC,MAAMC,IAAN,CAAWC,KAAX,CAAiB,GAAjB,CAAb;AACA,YAAIH,KAAKI,MAAL,GAAc,CAAlB,EAAqB;AACjB,gBAAI,CAACP,IAAIQ,cAAJ,CAAmBL,KAAK,CAAL,CAAnB,CAAL,EAAkC;AAC9BH,oBAAIG,KAAK,CAAL,CAAJ,IAAe,EAAf;AACH;AACDH,gBAAIG,KAAK,CAAL,CAAJ,EAAaA,KAAK,CAAL,CAAb,IAAwBC,MAAMK,KAAN,CAAYC,IAAZ,EAAxB;AACH,SALD,MAKO;AACHV,gBAAIG,KAAK,CAAL,CAAJ,IAAeC,MAAMK,KAAN,CAAYC,IAAZ,EAAf;AACH;AACJ,KAVD;AAWA;AACAC,eAAWX,GAAX;AACH,CAdD;;AAgBA,SAASW,UAAT,CAAoBvB,IAApB,EAA0B;AACtB,QAAMwB,MAAMjC,eAAe8B,KAA3B;AACAvB,UAASD,OAAT,SAAoB2B,GAApB,EAA2B;AACnBC,gBAAQ,MADW;AAEnBC,cAAMC,KAAKC,SAAL,CAAehB,GAAf,CAFa;AAGnBiB,iBAAS;AACL,4BAAgB;AADX;AAHU,KAA3B,EAOK9B,IAPL,CAOU,gBAAQ;AACV+B,gBAAQC,GAAR,CAAY/B,IAAZ;AACH,KATL;AAUH","file":"all.js","sourcesContent":["const categorySelect = document.querySelector('.category');\r\nconst submitBtn = document.querySelector('#submit');\r\nconst inputs = document.querySelectorAll('[type=\"text\"]');\r\nconst baseURL = 'http://localhost:8000';\r\n\r\nfetch(`${baseURL}/db`)\r\n    .then(data => data.json())\r\n    .then(data => {\r\n        displayCategories(data);\r\n    });\r\n\r\nString.prototype.capitalize = function() {\r\n    return this.charAt(0).toUpperCase() + this.slice(1);\r\n}\r\n\r\nfunction displayCategories(data) {\r\n    let output = '';\r\n    for (const prop in data) {\r\n        output += `<option value=\"${prop}\">${prop.capitalize()}</option>`;\r\n    }\r\n    categorySelect.innerHTML = output;\r\n}\r\n\r\nlet obj = {};\r\nsubmitBtn.addEventListener('click', () => {\r\n    inputs.forEach(input => {\r\n        const keys = input.name.split('.');\r\n        if (keys.length > 1) {\r\n            if (!obj.hasOwnProperty(keys[0])) {\r\n                obj[keys[0]] = {};\r\n            }\r\n            obj[keys[0]][keys[1]] = input.value.trim();\r\n        } else {\r\n            obj[keys[0]] = input.value.trim();\r\n        }\r\n    });\r\n    //console.log(obj);\r\n    submitData(obj);\r\n});\r\n\r\nfunction submitData(data) {\r\n    const cat = categorySelect.value;\r\n    fetch(`${baseURL}/${cat}`, {\r\n            method: 'POST',\r\n            body: JSON.stringify(obj),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n        })\r\n        .then(data => {\r\n            console.log(data);\r\n        });\r\n}\r\n"]}